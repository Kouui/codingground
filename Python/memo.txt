IPython provides a rich architecture for interactive computing with:

(*) Powerful interactive shells to play with Python.
(*) Support for interactive data visualization and use of GUI toolkits.
(*) A browser-based notebook with support for code, text, mathematical expressions, inline plots and other rich media.
(*) Flexible, embeddable interpreters to load into your own projects.
(*) Easy to use, high performance tools for parallel computing.

For further detail on IPython, you can check official website

http://ipython.org/

(*)execute a python file under interactive mode, ex,test.py
   method 1. $run test.py
   method 2. execfile("test.py", global_vals, local_vals)
  
(*)input("\n\nPress the enter key to exit.")
   Here, "\n\n" is used to create two new lines before displaying the actual line.
   Once the user presses the key, the program ends. This is a nice trick to keep 
   a console window open until the user is done with an application.
   
(*)I can delete the reference to a number object by using del statement.
   del va1[,var2, var3,.....]

(*)3 different numerical types
    int (signed integers)
    float (floating point real values)
    complex (complex numbers, denote: x+yj with x as real part and y as imaginary part)  

(*)index of array start from 0
str = 'Hello World!'
print (str)          # Prints complete string
print (str[0])       # Prints first character of the string
print (str[2:5])     # Prints characters starting from 3rd to 5th
print (str[2:])      # Prints string starting from 3rd character
print (str * 2)      # Prints string two times
print (str + "TEST") # Prints concatenated string
This will produce the following result −

Hello World!
H
llo
llo World!
Hello World!Hello World!
Hello World!TEST

(*)list: A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.

list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'john']

print (list)          # Prints complete list
print (list[0])       # Prints first element of the list
print (list[1:3])     # Prints elements starting from 2nd till 3rd 
print (list[2:])      # Prints elements starting from 3rd element
print (tinylist * 2)  # Prints list two times
print (list + tinylist) # Prints concatenated lists
This produce the following result −

['abcd', 786, 2.23, 'john', 70.200000000000003]
abcd
[786, 2.23]
[2.23, 'john', 70.200000000000003]
[123, 'john', 123, 'john']
['abcd', 786, 2.23, 'john', 70.200000000000003, 123, 'john']

warning: list[1:3] is from list[1] to list[3-1=2], not to list[3] which is the case in IDL

(*)tuple: A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.
The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists.

tuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
tinytuple = (123, 'john')

print (tuple)           # Prints complete tuple
print (tuple[0])        # Prints first element of the tuple
print (tuple[1:3])      # Prints elements starting from 2nd till 3rd 
print (tuple[2:])       # Prints elements starting from 3rd element
print (tinytuple * 2)   # Prints tuple two times
print (tuple + tinytuple) # Prints concatenated tuple
This produce the following result −

('abcd', 786, 2.23, 'john', 70.200000000000003)
abcd
(786, 2.23)
(2.23, 'john', 70.200000000000003)
(123, 'john', 123, 'john')
('abcd', 786, 2.23, 'john', 70.200000000000003, 123, 'john')

(*)tuple can not be revised. list can
tuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
list = [ 'abcd', 786 , 2.23, 'john', 70.2  ]
tuple[2] = 1000    # Invalid syntax with tuple
list[2] = 1000     # Valid syntax with list

list[2] = 1000     # Valid syntax with list
list[2] = 1000     # Valid syntax with list

(*)A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object. we can store value in numbers and strings.

dict = {}                     # resizable 
dict['one'] = "This is one"
dict[2]     = "This is two"   # will not overwrite dict['one'], because we just have defined two different dictionary key

tinydict = {'name': 'john','code':6734, 'dept': 'sales'}    # dict={key1: value1, key2:value2,....}


print (dict['one'])       # Prints value for 'one' key
print (dict[2])           # Prints value for 2 key
print (tinydict)          # Prints complete dictionary
print (tinydict.keys())   # Prints all the keys
print (tinydict.values()) # Prints all the values
This produce the following result −

This is one
This is two
{'dept': 'sales', 'code': 6734, 'name': 'john'}
['dept', 'code', 'name']
['sales', 6734, 'john']

（＊）CTRL+C to exit 

		
